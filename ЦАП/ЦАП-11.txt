from collections import defaultdict
import unittest


class StateMachineException(Exception):
    pass


class MooreMachine:
    def __init__(self):
        self.transitions = {
            't3': {
                'hike': [
                    {'next_state': 't2', 'cond': None, 'output': 'S0'}
                ],
                'visit': [
                    {'next_state': 't7', 'cond': None, 'output': 'S1'}
                ]
            },
            't2': {
                'spin': [
                    {'next_state': 't1', 'cond': None, 'output': 'S2'}
                ]
            },
            't1': {
                'hike': [
                    {'next_state': 't6', 'cond': None, 'output': 'S2'}
                ]
            },
            't6': {
                'hike': [
                    {'next_state': 't7', 'cond': None, 'output': 'S2'}
                ],
                'swap': [
                    {'next_state': 't7', 'cond': None, 'output': 'S2'}
                ]
            },
            't7': {
                'cast': [
                    {'next_state': 't1', 'cond': {'var': 'c', 'value': 1}, 'output': 'S2'},
                    {'next_state': 't0', 'cond': {'var': 'c', 'value': 0}, 'output': 'S1'}
                ],
                'swap': [
                    {'next_state': 't6', 'cond': None, 'output': 'S2'}
                ]
            },
            't0': {
                'spin': [
                    {'next_state': 't6', 'cond': {'var': 'x', 'value': 0}, 'output': 'S0'},
                    {'next_state': 't4', 'cond': {'var': 'x', 'value': 1}, 'output': 'S2'}
                ]
            },
            't4': {
                'visit': [
                    {'next_state': 't5', 'cond': None, 'output': 'S1'}
                ]
            },
            't5': {
                'hike': [
                    {'next_state': 't6', 'cond': None, 'output': 'S0'}
                ]
            }
        }

        self.current_state = 't3'
        self.variables = {'c': None, 'x': None}

    def let_c(self, value):
        self.variables['c'] = value

    def let_x(self, value):
        self.variables['x'] = value

    def visit(self):
        return self._execute_method('visit')

    def cast(self):
        return self._execute_method('cast')

    def spin(self):
        return self._execute_method('spin')

    def hike(self):
        return self._execute_method('hike')

    def _execute_method(self, method_name):
        if method_name not in self.transitions.get(self.current_state, {}):
            raise StateMachineException('unsupported')
        transitions = self.transitions[self.current_state][method_name]
        for trans in transitions:
            cond = trans.get('cond')
            if (cond is None or
                self.variables.get(cond['var']) == cond['value']):
                self.current_state = trans['next_state']
                return trans['output']
        raise StateMachineException('unsupported')


class TestMooreMachine(unittest.TestCase):
    def setUp(self):
        self.machine = MooreMachine()

    def test_execute_method_condition_branch(self):
        self.machine.current_state = 't7'
        self.machine.let_c(1)
        self.assertEqual(self.machine.cast(), 'S2')
        self.machine.current_state = 't7'
        self.machine.let_c(0)
        self.assertEqual(self.machine.cast(), 'S1')

    def test_execute_method_no_condition_branch(self):
        self.assertEqual(self.machine.visit(), 'S1')

    def test_execute_method_unsupported(self):
        self.machine.current_state = 't1'
        with self.assertRaises(StateMachineException) as context:
            self.machine.visit()
        self.assertEqual(str(context.exception), 'unsupported')

    def test_spin_method(self):
        with self.assertRaises(StateMachineException) as context:
            self.machine.spin()
        self.assertEqual(str(context.exception), 'unsupported')
        self.machine.current_state = 't2'
        self.assertEqual(self.machine.spin(), 'S2')
        self.assertEqual(self.machine.current_state, 't1')

    def test_spin_method_with_conditions(self):
        self.machine.current_state = 't7'
        self.machine.let_c(0)
        self.machine.cast()
        self.machine.let_x(0)
        self.assertEqual(self.machine.spin(), 'S0')
        self.assertEqual(self.machine.current_state, 't6')
        self.machine.current_state = 't0'
        self.machine.let_x(1)
        self.assertEqual(self.machine.spin(), 'S2')
        self.assertEqual(self.machine.current_state, 't4')

    def test_hike_method(self):
        self.assertEqual(self.machine.hike(), 'S0')
        self.assertEqual(self.machine.current_state, 't2')
        self.machine.current_state = 't1'
        self.assertEqual(self.machine.hike(), 'S2')
        self.assertEqual(self.machine.current_state, 't6')
        self.assertEqual(self.machine.hike(), 'S2')
        self.assertEqual(self.machine.current_state, 't7')

    def test_hike_method_unsupported(self):
        self.machine.current_state = 't4'
        with self.assertRaises(StateMachineException) as context:
            self.machine.hike()
        self.assertEqual(str(context.exception), 'unsupported')

    def test_hike_method_in_t5(self):
        self.machine.current_state = 't4'
        self.machine.visit()
        self.assertEqual(self.machine.hike(), 'S0')
        self.assertEqual(self.machine.current_state, 't6')

    def test_unsupported_method_in_current_state(self):
        states_and_methods = [
            ('t3', 'spin'),
            ('t3', 'cast'),
            ('t2', 'visit'),
            ('t2', 'hike'),
            ('t1', 'spin'),
            ('t1', 'visit'),
            ('t6', 'spin'),
            ('t6', 'visit'),
            ('t7', 'visit'),
            ('t0', 'hike'),
            ('t0', 'visit'),
            ('t4', 'hike'),
            ('t4', 'spin'),
            ('t5', 'spin'),
            ('t5', 'visit'),
        ]
        for state, method in states_and_methods:
            self.machine.current_state = state
            with self.assertRaises(StateMachineException) as context:
                getattr(self.machine, method)()
            self.assertEqual(str(context.exception), 'unsupported')

    def test_unsupported_due_to_unmet_conditions(self):
        self.machine.current_state = 't7'
        self.machine.variables['c'] = None
        with self.assertRaises(StateMachineException) as context:
            self.machine.cast()
        self.assertEqual(str(context.exception), 'unsupported')
        self.machine.current_state = 't0'
        self.machine.variables['x'] = 2
        with self.assertRaises(StateMachineException) as context:
            self.machine.spin()
        self.assertEqual(str(context.exception), 'unsupported')

    def test_unsupported_in_non_existent_state(self):
        self.machine.current_state = 'non_existent_state'
        for method in ['visit', 'cast', 'spin', 'hike']:
            with self.assertRaises(StateMachineException) as context:
                getattr(self.machine, method)()
            self.assertEqual(str(context.exception), 'unsupported')
